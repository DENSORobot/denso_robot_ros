<launch>

  <arg name="robot_name" default="vs087" />
  <arg name="robot_options" default="vs087_and_mhand" />

  <include file="$(find vs087_moveit_config)/launch/$(arg robot_options)/planning_context.launch">
    <arg name="robot_name" value="$(arg robot_name)" />
    <arg name="robot_options" value="$(arg robot_options)" />
  </include>

  <!-- GDB Debug Option -->
  <arg name="debug" default="false" />
  <arg unless="$(arg debug)" name="launch_prefix" value="" />
  <arg     if="$(arg debug)" name="launch_prefix" value="gdb --ex run --args" />

  <!-- Verbose Mode Option -->
  <arg name="info" default="$(arg debug)" />
  <arg unless="$(arg info)" name="command_args" value="" />
  <arg     if="$(arg info)" name="command_args" value="--debug" />

  <!-- move_group settings -->
  <arg name="allow_trajectory_execution" default="true"/>
  <arg name="max_safe_path_cost" default="1"/>
  <arg name="jiggle_fraction" default="0.05" />
  <arg name="publish_monitored_planning_scene" default="true"/>
  <arg name="planner" default="ompl"/>

  <!-- Planning Functionality -->
  <include ns="move_group" file="$(find vs087_moveit_config)/launch/$(arg robot_options)/planning_pipeline.launch.xml">
    <arg name="pipeline" value="$(arg planner)" />
    <arg name="robot_options" value="$(arg robot_options)" />
  </include>

  <!-- Trajectory Execution Functionality -->
  <include ns="move_group" file="$(find vs087_moveit_config)/launch/$(arg robot_options)/trajectory_execution.launch.xml" if="$(arg allow_trajectory_execution)">
    <arg name="moveit_manage_controllers" value="true" />
    <arg name="robot_name" value="$(arg robot_name)" />
    <arg name="robot_options" value="$(arg robot_options)" />
  </include>

  <!-- Sensors Functionality -->
  <include ns="move_group" file="$(find vs087_moveit_config)/launch/$(arg robot_options)/sensor_manager.launch.xml" if="$(arg allow_trajectory_execution)">
    <arg name="moveit_sensor_manager" value="vs087" />
    <arg name="robot_options" value="$(arg robot_options)" />
  </include>

  <!-- Start the actual move_group node/action server -->
  <!-- <node name="move_group" launch-prefix="$(arg launch_prefix)" pkg="moveit_ros_move_group" type="move_group" respawn="false" output="screen" -->
  <!--       args="joint_states:=/$(arg robot_name)/joint_states $(arg command_args)"> -->
  <node name="move_group" launch-prefix="$(arg launch_prefix)" pkg="moveit_ros_move_group" type="move_group" respawn="false" output="screen"
        args="joint_states:=/vs087_and_mhand/joint_states $(arg command_args)">


    <!-- Set the display variable, in case OpenGL code is used internally -->
    <env name="DISPLAY" value="$(optenv DISPLAY :0)" />

    <param name="allow_trajectory_execution" value="$(arg allow_trajectory_execution)"/>
    <param name="max_safe_path_cost" value="$(arg max_safe_path_cost)"/>
    <param name="jiggle_fraction" value="$(arg jiggle_fraction)" />

    <!-- load these non-default MoveGroup capabilities -->
    <!--
    <param name="capabilities" value="
                  a_package/AwsomeMotionPlanningCapability
                  another_package/GraspPlanningPipeline
                  " />
    -->

    <!-- inhibit these default MoveGroup capabilities -->
    <!--
    <param name="disable_capabilities" value="
                  move_group/MoveGroupKinematicsService
                  move_group/ClearOctomapService
                  " />
    -->

    <!-- Publish the planning scene of the physical robot so that rviz plugin can know actual robot -->
    <param name="planning_scene_monitor/publish_planning_scene" value="$(arg publish_monitored_planning_scene)" />
    <param name="planning_scene_monitor/publish_geometry_updates" value="$(arg publish_monitored_planning_scene)" />
    <param name="planning_scene_monitor/publish_state_updates" value="$(arg publish_monitored_planning_scene)" />
    <param name="planning_scene_monitor/publish_transforms_updates" value="$(arg publish_monitored_planning_scene)" />
  </node>

</launch>
